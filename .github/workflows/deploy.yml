name: 'ðŸš€ Rust Api Deploy'

on:
  workflow_dispatch:


env:
  CARGO_TERM_COLOR: always
  ECR_RUST_API_REPOSITORY: pedido_produto_api
  ECR_LISTENER_API_REPOSITORY: atualiza_pedido
  EKS_CLUSTER_NAME: tech-challenge
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy Rust App
    runs-on: ubuntu-latest

    steps:

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_RUST_API_REPOSITORY:latest -f Dockerfile ./docker-api/
        docker push $ECR_REGISTRY/$ECR_RUST_API_REPOSITORY:latest

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        kubectl apply -f kustomize/configmap.yaml
        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_RUST_API_REPOSITORY:latest|g" kustomize/deployment.yaml && \
        kubectl apply -f kustomize/deployment.yaml
        kubectl apply -f kustomize/services.yaml

  deploy-listener:
    name: Deploy Listener App
    runs-on: ubuntu-latest

    steps:

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_LISTENER_API_REPOSITORY:latest -f Dockerfile ./docker-listener/
        docker push $ECR_REGISTRY/$ECR_LISTENER_API_REPOSITORY:latest

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_LISTENER_API_REPOSITORY:latest|g" kustomize/deployment-listener.yaml && \
        kubectl apply -f kustomize/deployment-listene.yaml
        kubectl apply -f kustomize/service-listener.yaml